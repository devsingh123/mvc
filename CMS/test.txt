Major Pitfalls in JS
**************************

Historical Problem: null is object why it is not solved yet from JS so, this is called Primitive JS

https://www.toptal.com/javascript/interview-questions
------------------------------------------------------
''        ==   '0'           //false
0         ==   ''            //true
0         ==   '0'           //true
false     ==   'false'       //false
false     ==   '0'           //true
false     ==   undefined     //false
false     ==   null          //false
null      ==   undefined     //true
" \t\r\n" ==   0             //true
------------------------------------------------------
console.log(isNaN(NaN)); //true
---
console.log(typeof (NaN)); //number
---
console.log(typeof (undefined)); //undefined
---
console.log(typeof (null)); //object
---
console.log(typeof (NULL)); //undefined
---
console.log(typeof ([])); //object
---
console.log(typeof ({})); //object
---
console.log(typeof (a)); //undefined
---
console.log(typeof ('a')); //string
---
console.log(typeof (1)); //number
---
console.log(typeof (['a','2'])); //object
---
console.log(typeof ([a,'2'])); a is not defined
---
'use string' cannot leave value undecleared
------------------------------------------------------
function a() {
  return 1;
}
console.log(typeof (a)); //function
------------------------------------------------------
(function(){
  var a = b = 3;
})();
console.log(typeof (a)); //undefined
console.log(typeof (b)); //number
------------------------------------------------------
var a = b = 3;
console.log(typeof (a)); //number
console.log(typeof (b)); //number
------------------------------------------------------
But in fact, var a = b = 3; is actually shorthand for:
b = 3;
var a = b;
------------------------------------------------------
var myObject = {
    foo: "bar",
    func: function() {
        var self = this;
        console.log("outer func:  this.foo = " + this.foo);
        console.log("outer func:  self.foo = " + self.foo);
        (function() {
            console.log("inner func:  this.foo = " + this.foo);
            console.log("inner func:  self.foo = " + self.foo);
        }());
    }
};
myObject.func();

outer func:  this.foo = bar
outer func:  self.foo = bar
inner func:  this.foo = undefined
inner func:  self.foo = bar
------------------------------------------------------
continue; //Jumps the loop from the current point and move ahead
break; //will stop the loop at a point
------------------------------------------------------
console.log("1" + 1); //11
console.log(+"1" + 1); //2
console.log(+"a" + 1); //NaN
console.log(1 + "1"); //11
console.log(1 + +"1") //2
console.log(+1 + +1 + "1"); //21
------------------------------------------------------
function foo1()
{
  return {
      bar: "hello"
  };
}

function foo2()
{
  return
  {
      bar: "hello"
  };
}
console.log("foo1 returns:"); //foo1 returns:
console.log(foo1()); //Object {bar: "hello"}
console.log("foo2 returns:"); //foo2 returns:
console.log(foo2()); //undefined 
------------------------------------------------------
console.log(0.1 + 0.2); //0.30000000000000004
console.log(0.1 + 0.2 == 0.3); //false
------------------------------------------------------
console.log(0.1 + 2); //2.1
console.log(0.1 + 2 === 3); //false
------------------------------------------------------
console.log(1 + 2); //3
console.log(1 + 2 === 3); //true
------------------------------------------------------
Palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.
Palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward.






















